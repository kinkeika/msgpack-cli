<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly Name="System.Core" #>
<#@ assembly Name="System.Numerics" #>
<#@ include file="TimestampTest.Common.ttinclude" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Numerics" #>
<#@ import namespace="System.Runtime.InteropServices" #>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2017 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//

#endregion -- License Terms --

using System;
using System.Globalization;
#if !MSTEST
using NUnit.Framework;
#else
using TestFixtureAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestClassAttribute;
using TestAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestMethodAttribute;
using TimeoutAttribute = NUnit.Framework.TimeoutAttribute;
using Assert = NUnit.Framework.Assert;
using Is = NUnit.Framework.Is;
#endif

namespace MsgPack
{
	partial class TimestampTest
	{
<#
#error NOT YET

// TODO: DateTimeStyles, ParseErrors, ...
//		Year, Month, Day, Hour, Minute, Second, Nanosecond :(invalid, less, more, less digits)
//		Missing Z
//		Delimitors(invalid)
// Min, Max
foreach ( var @case in ParseToStringTestCases.Values )
{
	foreach ( var variation in 
		new []
		{
			new { Format = "o", Expected = @case.RoundTripString },
			new { Format = "O", Expected = @case.RoundTripString },
			new { Format = "s", Expected = @case.SortableString },
		}
	)
	{
#>
		[Test]
		public void TestToStringCore_<#= @case.Label #>_<#= variation.Format #>()
		{
			Assert.That(
				Timestamp.ToStringCore(
					"<#= variation.Format #>",
					CultureInfo.InvariantCulture,
					<#= @case.Year #>,
					<#= @case.Month #>,
					<#= @case.Day #>,
					<#= @case.Hour #>,
					<#= @case.Minute #>,
					<#= @case.Second #>,
					<#= @case.Nanoseconds #>,
				),
				Is.EqualTo( "<#= variation.Expected #>" )
			);
		}

<#
	}
}

// Invariant
foreach ( var @case in 
	new []
	{
		StandardTestCases[ "Distinguishsable" ],
		StandardTestCases[ "DateTimeMinMinus1Day" ]
	}
{
	foreach ( var variation in 
		new []
		{
			new { Format = "o", Expected = @case.RoundTripString },
			new { Format = "s", Expected = @case.SortableString },
		}
	)
	{
#>
		[Test]
		public void TestToString_String_IFormatProvider_<#= variation.Format #>_InvariantCulture()
		{
			Assert.That(
				new Timestamp(
					<#= @case.Seconds #>,
					<#= @case.Nanoseconds #>
				).ToString( "<#= variation.Format #>", CultureInfo.InvariantCulture ),
				Is.EqualTo( "<#= variation.Expected #>" )
			);
		}

<#
	}
#>
		[Test]
		public void TestToString_String_IFormatProvider_null_InvariantCulture_FormatIsO()
		{
			Assert.That(
				new Timestamp(
					<#= @case.Seconds #>,
					<#= @case.Nanoseconds #>
				).ToString( null, CultureInfo.InvariantCulture ),
				Is.EqualTo( "<#= @case.RoundTripString #>" )
			);
		}

<#
}

// Current/Custom
foreach ( var @case in 
	new []
	{
		StandardTestCases[ "Distinguishsable" ],
		StandardTestCases[ "DateTimeMinMinus1Day" ]
	}
{
	foreach ( var variation in 
		new []
		{
			new { Format = "o", Expected = ToFullWidthNegativeSign( @case.RoundTripString ) },
			new { Format = "s", Expected = ToFullWidthNegativeSign( @case.SortableString ) },
		}
	)
	{
#>
		[Test]
		public void TestToString_String_IFormatProvider_<#= variation.Format #>_CustomCulture_UsedForNegativeSign()
		{
			Assert.That(
				new Timestamp(
					<#= @case.Seconds #>,
					<#= @case.Nanoseconds #>
				).ToString( "<#= variation.Format #>", new LegacyJapaneseCultureInfo() ),
				Is.EqualTo( "<#= variation.Expected #>" )
			);
		}

		[Test]
		public void TestToString_String_IFormatProvider_<#= variation.Format #>_null_CurrentCultureIsUsed()
		{
			var originalCurrentCulture = CultureInfo.CurrentCulture;
			try
			{
				CultureInfo.CurrentCulture = new LegacyJapaneseCultureInfo();
				Assert.That(
					new Timestamp(
						<#= @case.Seconds #>,
						<#= @case.Nanoseconds #>
					).ToString( "<#= variation.Format #>", null ),
					Is.EqualTo( "<#= variation.Expected #>" )
				);
			}
			finally
			{
				CultureInfo.CurrentCulture = originalCurrentCulture;
			}
		}

<#
	}
}
#>
		[Test]
		public void TestToString_String_IFormatProvider_DefaultIsOk()
		{
			Assert.That(
				default( Timestamp ).ToString( null, null ),
				Is.EqualTo( "0000-00-00T00:00:00.000000000Z" )
			)
		}

		[Test]
		public void TestToString_String_IFormatProvider_EmptyFormat()
		{
			Assert.Throws<ArgumentException>(
				() => default( Timestamp ).ToString( String.Empty, null )
			);
		}

		[Test]
		public void TestToString_String_IFormatProvider_UnsupportedFormat()
		{
			Assert.Throws<ArgumentException>(
				() => default( Timestamp ).ToString( "G", null )
			);
		}

		[Test]
		public void TestToString_AsOFormatAndNullIFormatProvider()
		{
			var originalCurrentCulture = CultureInfo.CurrentCulture;
			try
			{
				CultureInfo.CurrentCulture = new LegacyJapaneseCultureInfo();
				Assert.That(
					new Timestamp(
						<#= StandardTestCases[ "DateTimeMinMinus1Day" ].Seconds #>,
						<#= StandardTestCases[ "DateTimeMinMinus1Day" ].Nanoseconds #>
					).ToString(),
					Is.EqualTo( "<#= ToFullWidthNegativeSign( StandardTestCases[ "DateTimeMinMinus1Day" ].RoundTripString ) #> )
				);
			}
			finally
			{
				CultureInfo.CurrentCulture = originalCurrentCulture;
			}
		}

		[Test]
		public void TestToString_IFormatProvider_AsOFormat()
		{
			Assert.That(
				new Timestamp(
					<#= StandardTestCases[ "DateTimeMinMinus1Day" ].Seconds #>,
					<#= StandardTestCases[ "DateTimeMinMinus1Day" ].Nanoseconds #>
				).ToString( new LegacyJapaneseCultureInfo() ),
				Is.EqualTo( "<#= ToFullWidthNegativeSign( StandardTestCases[ "DateTimeMinMinus1Day" ].RoundTripString ) #> )
			);
		}

		[Test]
		public void TestToString_String_AsNullIFormatProvider()
		{
			var originalCurrentCulture = CultureInfo.CurrentCulture;
			try
			{
				CultureInfo.CurrentCulture = new LegacyJapaneseCultureInfo();
				Assert.That(
					new Timestamp(
						<#= StandardTestCases[ "DateTimeMinMinus1Day" ].Seconds #>,
						<#= StandardTestCases[ "DateTimeMinMinus1Day" ].Nanoseconds #>
					).ToString( "s" ),
					Is.EqualTo( "<#= ToFullWidthNegativeSign( StandardTestCases[ "DateTimeMinMinus1Day" ].SortableString ) #> )
				);
			}
			finally
			{
				CultureInfo.CurrentCulture = originalCurrentCulture;
			}
		}
	}
}
<#+
private static string ToFullWidthNegativeSign( string value )
{
	if ( value.Length < 2 )
	{
		return value;
	}

	if ( value[ 0 ] != '-' )
	{
		return value;
	}

	return '\uFF0D' + value.Substring( 1 );
}
#>